/target
fn main() {
    let s = String::from("ghj7687fh");
    println!("Hello, world!, let's try something out here! Our string is:'{}'", s);
    println!("{}", s.chars().count()); // Counts the number of characters!



fn count_alphabetic_and_numeric(s: &str) -> (usize, usize) {
    let mut alphabetic_count = 0;
    let mut numeric_count = 0;

    for c in s.chars() {
        if c.is_alphabetic() {
            alphabetic_count += 1;
        } else if c.is_numeric() {
            numeric_count += 1;
        }
    }

    (alphabetic_count, numeric_count)
}
    let (alphabetic_count, numeric_count) = count_alphabetic_and_numeric(s);

    


// Find the longest balanced substring with distinct characters
    let balanced_substring = find_longest_balanced_distinct_substring(&s);
    println!("The longest balanced substring where the number of distinct letters is equal to the number of distinct digits is: '{}'", balanced_substring);
}

